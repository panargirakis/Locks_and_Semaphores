Phase 1: Assume that the Minnesotan drivers follow the convention that whoever arrives at the intersection first proceeds first. Using the language of synchronization primitives, describe the way this intersection is controlled. In what ways is this method suboptimal?

Answer: This intersection is controlled in a way such that, if a car arrives to the intersection first, it acquires the "lock" and does not allow any other car to proceed through the intersection at the same time. Once it lets go of the lock, another car can acquire it and then proceed through the intersection while blocking other cars from doing so. This method is suboptimal because only one car can go at a time since only one is allowed in the intersection at one time. In reality, two cars could take right or left turns at the same time and not crash, but not using this method. 

*****

Phase 2: The governor allows the Massachusetts drivers to return and sends the Minnesotans back home. Assume these drivers do not follow the convention described above. In particular, Massachusetts drivers are happy to enter an intersection, even if only the front bumper of their car will fit. In what instances can this mindset produce a deadlock? (It will be helpful to think of this in terms of the model we are using instead of trying to visualize an actual intersection). How can such a deadlock be prevented?

Answer: This mindset can produce a deadlock because if there are four cars and they all arrive at the same time and enter the intersection, then they will all end up waiting on each other. This would create a circular wait and thus a deadlock would occur. Another way that a deadlock could occur is if a car acquires the space that their front bumper is in while requesting others. This would lead to a hold-and-wait situation as one car thread holding on to some resources while requesting others can lead to deadlock.

A deadlock can be prevented if by removing at least one of the conditions for deadlock. A deadlock only occurs if all of the following conditions are met:

1. mutual exclusion: threads claim exclusive access to shared resources (cars claiming parts of intersections)
2. hold-and-wait: a thread can hold some resources while requesting others (cars hold on to portions of the intersection while trying to request a different portion)
3. no resource preemption: the system cannot forcibly take a resource from a thread holding it (other cars cannot take a part of the intersection from another car that is already holding it)
4. circular wait: meaning that Thread A is waiting for Thread B which is waiting for Thread C which is waiting for Thread A (having all four cars wait for each other to go in the intersection)

Therefore, if any one of these conditions are removed, then deadlock will be able to be avoided.
