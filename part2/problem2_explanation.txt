Phase 1: Assume that the Minnesotan drivers follow the convention that whoever arrives at the intersection first proceeds first. Using the language of synchronization primitives, describe the way this intersection is controlled. In what ways is this method suboptimal?

Answer: This intersection is controlled in a way such that, if a car arrives to the intersection first, it acquires the "lock" and does not allow any other car to proceed through the intersection at the same time. Once it lets go of the lock, another car can acquire it and then proceed through the intersection while blocking other cars from doing so. This method is suboptimal because only one car can go at a time since only one is allowed in the intersection at one time. In reality, two cars could take right or left turns at the same time and not crash, but not using this method. 

*****

Phase 2: The governor allows the Massachusetts drivers to return and sends the Minnesotans back home. Assume these drivers do not follow the convention described above. In particular, Massachusetts drivers are happy to enter an intersection, even if only the front bumper of their car will fit. In what instances can this mindset produce a deadlock? (It will be helpful to think of this in terms of the model we are using instead of trying to visualize an actual intersection). How can such a deadlock be prevented?

Answer: This mindset can produce a deadlock because if there are four cars and they all arrive at the same time and enter the intersection, then they will all end up waiting on each other. This would create a circular wait and thus a deadlock would occur. Another way that a deadlock could occur is if a car acquires the space that their front bumper is in while requesting others. This would lead to a hold-and-wait situation as one car thread holding on to some resources while requesting others can lead to deadlock.

A deadlock can be prevented if by removing at least one of the conditions for deadlock. A deadlock only occurs if all of the following conditions are met:

1. mutual exclusion: threads claim exclusive access to shared resources (cars claiming parts of intersections)
2. hold-and-wait: a thread can hold some resources while requesting others (cars hold on to portions of the intersection while trying to request a different portion)
3. no resource preemption: the system cannot forcibly take a resource from a thread holding it (other cars cannot take a part of the intersection from another car that is already holding it)
4. circular wait: meaning that Thread A is waiting for Thread B which is waiting for Thread C which is waiting for Thread A (having all four cars wait for each other to go in the intersection)

Therefore, if any one of these conditions are removed, then deadlock will be able to be avoided.


*****


OUTPUT OF EXAMPLE RUN (Analysis Below)
/home/panos/CS3013/Project_3/part2/cmake-build-debug/Project3_2
Car 5 approaching intersection from dir 3 and turn 1 at time 0.0000
Car 5 entered the intersection at time 0.0000 from dir 3 and turn 1
Car 6 approaching intersection from dir 1 and turn 1 at time 0.0000
Car 6 entered the intersection at time 0.0000 from dir 1 and turn 1
Car 7 approaching intersection from dir 1 and turn 1 at time 0.0000
Car 8 approaching intersection from dir 2 and turn 0 at time 0.0000
Car 9 approaching intersection from dir 1 and turn 1 at time 0.0000
Car 10 approaching intersection from dir 2 and turn 1 at time 0.0000
Car 11 approaching intersection from dir 2 and turn 1 at time 0.0000
Car 12 approaching intersection from dir 3 and turn 1 at time 0.0000
Car 13 approaching intersection from dir 0 and turn 0 at time 0.0000
Car 14 approaching intersection from dir 0 and turn 1 at time 0.0000
Car 15 approaching intersection from dir 3 and turn 2 at time 0.0000
Car 16 approaching intersection from dir 3 and turn 0 at time 0.0000
Car 17 approaching intersection from dir 2 and turn 2 at time 0.0000
Car 18 approaching intersection from dir 2 and turn 1 at time 0.0000
Car 4 approaching intersection from dir 3 and turn 1 at time 0.0000
Car 19 approaching intersection from dir 1 and turn 0 at time 0.0000
Car 3 approaching intersection from dir 2 and turn 0 at time 0.0000
Car 2 approaching intersection from dir 1 and turn 0 at time 0.0000
Car 1 approaching intersection from dir 1 and turn 1 at time 0.0000
Car 0 approaching intersection from dir 3 and turn 1 at time 0.0000
Car 5 exited the intersection at time 1.0000
Car 5 approaching intersection from dir 1 and turn 0 at time 1.0000
Car 13 entered the intersection at time 1.0000 from dir 0 and turn 0
Car 6 exited the intersection at time 1.0000
Car 6 approaching intersection from dir 1 and turn 2 at time 1.0000
Car 13 exited the intersection at time 2.0000
Car 13 approaching intersection from dir 0 and turn 1 at time 2.0000
Car 14 entered the intersection at time 2.0000 from dir 0 and turn 1
Car 8 entered the intersection at time 2.0000 from dir 2 and turn 0
Car 14 exited the intersection at time 3.0000
Car 14 approaching intersection from dir 2 and turn 2 at time 3.0000
Car 12 entered the intersection at time 3.0000 from dir 3 and turn 1
Car 7 entered the intersection at time 3.0000 from dir 1 and turn 1
Car 13 entered the intersection at time 3.0000 from dir 0 and turn 1
Car 8 exited the intersection at time 3.0000
Car 8 approaching intersection from dir 3 and turn 0 at time 3.0000
Car 10 entered the intersection at time 3.0000 from dir 2 and turn 1
Car 12 exited the intersection at time 4.0000
Car 12 approaching intersection from dir 1 and turn 1 at time 4.0000
Car 13 exited the intersection at time 4.0000
Car 13 approaching intersection from dir 3 and turn 2 at time 4.0000
Car 15 entered the intersection at time 4.0000 from dir 3 and turn 2
Car 7 exited the intersection at time 4.0000
Car 7 approaching intersection from dir 0 and turn 0 at time 4.0000
Car 9 entered the intersection at time 4.0000 from dir 1 and turn 1
Car 10 exited the intersection at time 4.0000
Car 10 approaching intersection from dir 2 and turn 2 at time 4.0000
Car 11 entered the intersection at time 4.0000 from dir 2 and turn 1
Car 15 exited the intersection at time 5.0000
Car 15 approaching intersection from dir 0 and turn 1 at time 5.0000
Car 11 exited the intersection at time 5.0000
Car 11 approaching intersection from dir 1 and turn 0 at time 5.0000
Car 9 exited the intersection at time 5.0000
Car 9 approaching intersection from dir 0 and turn 0 at time 5.0000
Car 7 entered the intersection at time 5.0000 from dir 0 and turn 0
Car 7 exited the intersection at time 6.0000
Car 7 approaching intersection from dir 0 and turn 2 at time 6.0000
Car 16 entered the intersection at time 6.0000 from dir 3 and turn 0
Car 16 exited the intersection at time 7.0000
Car 16 approaching intersection from dir 2 and turn 0 at time 7.0000
Car 19 entered the intersection at time 7.0000 from dir 1 and turn 0
Car 19 exited the intersection at time 8.0000
Car 19 approaching intersection from dir 1 and turn 2 at time 8.0000
Car 4 entered the intersection at time 8.0000 from dir 3 and turn 1
Car 17 entered the intersection at time 8.0000 from dir 2 and turn 2
Car 15 entered the intersection at time 8.0000 from dir 0 and turn 1
Car 4 exited the intersection at time 9.0000
Car 4 approaching intersection from dir 0 and turn 0 at time 9.0000
Car 15 exited the intersection at time 9.0000
Car 15 approaching intersection from dir 2 and turn 0 at time 9.0000
Car 17 exited the intersection at time 9.0000
Car 17 approaching intersection from dir 2 and turn 0 at time 9.0000
Car 18 entered the intersection at time 9.0000 from dir 2 and turn 1
Car 2 entered the intersection at time 9.0000 from dir 1 and turn 0
Car 18 exited the intersection at time 10.0000
Car 18 approaching intersection from dir 2 and turn 2 at time 10.0000
Car 9 entered the intersection at time 10.0000 from dir 0 and turn 0
Car 0 entered the intersection at time 10.0000 from dir 3 and turn 1
Car 2 exited the intersection at time 10.0000
Car 2 approaching intersection from dir 3 and turn 2 at time 10.0000


*****
Key:
Approach Directions: 0 = North, 1 = South, 2 = West, 3 = East
Turn Directions: 0 = left, 1 = right, 2 = straight


Analysis for Specific Run:
1. Car 5 approaches the intersection from the East side and wishes to take a right turn at time 0. It is able to enter the intersection as no cars are currently in it and take a right turn from the East side. At the same time, Car 6 approaches the intersection from the South side and wishes to take a right turn. Because Car 5's right turn does not interfere with the right turn that Car 6 wants to take, Car 6 is able to enter the intersection from the South side and take a right turn.
2. While Cars 5 and 6 are in the intersection, a multitude of other cars approach the intersection from their respective directions with a random turn direction that they would like to take. 
3. Once both Cars 5 and 6 exit the intersection, they get sent back into the queue and approach the intersection with a new approach and turn direction. Car 13 then enters the intersection from the North side and takes a left. It makes sense that Car 13 does this after Cars 5 and 6 leave the intersection, otherwise there would be a car crash.
4. Car 13 leaves the intersection and it placed back in the queue with new a new approach and turn direction.
3. This cycle of synchronization continues with the remaining cars in the queue (and technically never ends since we have our code running in an infinite loop).


How It Meets Requirements:
1. To enter the intersection, each car must have all of the locks that it required for the turn it wants to make. Since the lock can only be held by one car at a time, no two cars can occupy the same block at the same time.
2. The car will keep waiting if it is not the first one in the linked list and thus, the first one in the intersection.
3. Fairness and parallelism:
The synchronization works by waking up all threads with a condition variable every time a car exits the intersection. At that point, the threads that are the first in their respective queues will stay awake while all others  will keep sleeping. Immediately after, the awakened threads will attempt to acquire the locks they need using the same order. The global order is how deadlocks are prevented. While acquiring the locks, there are two cases. 1) All threads will need separate locks and will thus move along. 2) There will be overlap. If there is overlap, the first batch of non-overlapping cars will get to go (which batch depends on lock acquisition order, it is practically random). After these cars are gone, the cars that stayed behind will get to go immediately. This is because they are waiting for the locks and will be the first ones to get a change to acquire them before any new cars get awakened in the queue. In this way, fairness is maintained and parallelism is maximized.
